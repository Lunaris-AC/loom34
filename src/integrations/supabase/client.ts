// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gojxbfefcqjrrrzjdtfu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdvanhiZmVmY3FqcnJyempkdGZ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4OTIyMjMsImV4cCI6MjA1ODQ2ODIyM30.i1IHA4LZB7r80VN0pZVvT7BNtHuXUqBu_Wy0nkXeqB4";

// Configuration pour la reconnection automatique
const RECONNECT_ATTEMPTS = 3;
const RECONNECT_DELAY = 1000; // 1 seconde

// Créer le client Supabase avec configuration optimisée
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Fonction pour vérifier la connexion avec gestion des erreurs
export const checkConnection = async () => {
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    return !error;
  } catch (error) {
    console.error('Erreur de connexion:', error);
    return false;
  }
};

// Fonction pour réessayer une opération avec gestion des sessions
export const retryOperation = async <T>(
  operation: () => Promise<T>,
  maxAttempts: number = 3
): Promise<T> => {
  let lastError: any;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error;
      console.warn(`Tentative ${attempt}/${maxAttempts} échouée:`, error);
      
      if (attempt < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
  }
  
  throw lastError;
};

// Pour debugging
console.log('Supabase client initialized with URL:', SUPABASE_URL);
